#!groovy
//
//  Copyright (c) 2019-2023, ETH Zurich. All rights reserved.
//
//  Please, refer to the LICENSE file in the root directory.
//  SPDX-License-Identifier: BSD-3-Clause
//
pipeline {
    agent any
    stages {
        stage('Info') {
            steps {
                echo "Branch Name: ${env.BRANCH_NAME}"
                echo "BUILD_NUMBER : ${env.BUILD_NUMBER}"
                echo "BUILD_ID : ${env.BUILD_ID}"
                echo "JOB_NAME: ${env.JOB_NAME}"
                echo "BUILD_TAG : ${env.BUILD_TAG}"
                echo "EXECUTOR_NUMBER : ${env.EXECUTOR_NUMBER}"
                echo "NODE_NAME: ${env.NODE_NAME}"
                echo "NODE_LABELS : ${env.NODE_LABELS}"
                echo "WORKSPACE : ${env.WORKSPACE}"
                echo "JENKINS_HOME : ${env.JENKINS_HOME}"
                echo "GIT COMMIT: ${env.GIT_COMMIT}"
                sh "docker --version"
                sh "docker-compose --version"
                sh "bash --version"
                sh "git --version"
                sh "pwd"
                sh "ls -la"
                sh "git status"
            }
        }

        stage('Refresh') {
            when {
                anyOf {
                    // For now, we use these branches to build everythig from scratch
                    // See refresh.sh
                    branch 'master';
                    branch 'dev'
                }
            }
            steps {
                sh "ci/dev/refresh.sh"
            }
        }

        stage('Setup') {
            steps {
                sh "ci/dev/setup.sh"
            }
        }

        stage('Tests') {
            steps {
                sh "ci/dev/test.sh"
            }
        }
    }

    post {
        always {
            script {
                // Save the log files
                try {
                    sh "mkdir -p /var/log/jenkins/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
                    sh "cp -r deploy/test-build/logs/firecrest/* /var/log/jenkins/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}/."
                } catch (errCpLogs) {
                    echo 'Error while saving log files: ' + errCpLogs.toString()
                }
            }
        }

        success {
            script {
                // Notify Github on success
                withCredentials([string(credentialsId: 'firecrestci_access_token', variable: 'accessToken')]) {
                    sh 'curl -H "Authorization: token ' + "${accessToken}"  + '" "https://api.github.com/repos/eth-cscs/firecrest/statuses/' + "${env.GIT_COMMIT}" + '" \\' +
                    '-H "Content-Type: application/json" \\' +
                    '-X POST \\' +
                    '-d "{\\"state\\": \\"success\\",\\"context\\": \\"continuous-integration/jenkins\\", \\"description\\": \\"Jenkins\\", \\"target_url\\": \\"' + "${env.BUILD_URL}" + '/console\\"}"'
                }
            }
        }

        unsuccessful{
            script {
                // Notify Github on failure
                withCredentials([string(credentialsId: 'firecrestci_access_token', variable: 'accessToken')]) {
                    sh 'curl -H "Authorization: token ' + "${accessToken}"  + '" "https://api.github.com/repos/eth-cscs/firecrest/statuses/' + "${env.GIT_COMMIT}" + '" \\' +
                    '-H "Content-Type: application/json" \\' +
                    '-X POST \\' +
                    '-d "{\\"state\\": \\"failure\\",\\"context\\": \\"continuous-integration/jenkins\\", \\"description\\": \\"Jenkins\\", \\"target_url\\": \\"' + "${env.BUILD_URL}" + '/console\\"}"'
                }
            }
        }

        cleanup {
            script {
                try {
                    sh "ci/dev/clean.sh"
                } catch (errCpLogs) {
                    echo 'Error while trying to clean: ' + errCpLogs.toString()
                }
            }
        }
    }
}