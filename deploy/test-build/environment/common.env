# Environment vars common for all microservices
# Important: all lists use semicolon to separate items, and must be quoted to escape ';'
# name of header key used to get authentication:
# possible values: "Authorization" ("X-Userinfo" was disabled)
# Authorization:  JWT token as generated by Keycloak: {"Authorization:", "Bearer fjfk..."}
F7T_AUTH_HEADER_NAME=Authorization
# If AUTH_HEADER_NAME = Authorization, it can also check REALM_RSA_PUBLIC_KEY: RSA key from KeyCloak Realm which signs token.
# REALM_RSA_PUBLIC_KEY="MII....QAB"
# use 1 line without headers ("-----BEGIN PUBLIC KEY-----", "-----END PUBLIC KEY-----")
F7T_REALM_RSA_PUBLIC_KEY=
#kid: "fVc6h439Xv...."
F7T_AUTH_TOKEN_ISSUER=''
# specify Audience established by Keycloak, leave empty to skip verification
F7T_AUTH_TOKEN_AUD=''
# Keycloak scope for clients:
F7T_AUTH_REQUIRED_SCOPE=''
F7T_REALM_RSA_TYPE=RS256
# AUTHENTICATION ROLE for FirecREST Service Accounts
F7T_AUTH_ROLE=''
# DEBUG FLAG
F7T_DEBUG_MODE=True
#-------
# microservices IPs, also defined on each 'env_make' inside containers
F7T_COMPUTE_IP=compute
#TaskPersistence (redis)
F7T_PERSIST_HOST=taskpersistence
F7T_STORAGE_IP=storage
#----- ports:
F7T_CERTIFICATOR_PORT=5010
F7T_COMPUTE_PORT=5000
F7T_TASKS_PORT=5003
F7T_STATUS_PORT=5001
F7T_STORAGE_PORT=5002
F7T_UTILITIES_PORT=5004
F7T_RESERVATIONS_PORT=5005
#-------
F7T_CERTIFICATOR_HOST=certificator
F7T_TASKS_HOST=tasks
F7T_COMPUTE_HOST=compute
F7T_STORAGE_HOST=storage
F7T_UTILITIES_HOST=utilities
F7T_STATUS_HOST=status
F7T_RESERVATIONS_HOST=reservations
#-------
# list of systems
#public name for systems, where users except to submit jobs and get files (list with ';')
F7T_SYSTEMS_PUBLIC_NAME='system01;system02'
# filesystems mounted in each system
# ; separated for system (position related to SYSTEMS_PUBLIC) and for each filesystem mounted inside each system, separated with ","
# example: let's suppose SYSTEMS_PUBLIC="cluster1;cluster2", cluster1 has "/home" and "/scratch", and cluster2 has mounted "/home":
# List of filesystems mounted in each system
#F7T_FILESYSTEMS="{'cluster01': [{'name':'PROJECT','path':'/project','description':'Project Filesystem'}, 
#                                {'name':'STORE', 'path':'/store', 'description':'Long term filesystem'}, 
#                                {'name':'SCRATCH', 'path':'/scratch', 'description':'Fast Lustre filesystem'} ], 
#                 'cluster02': [{'name':'PROJECT','path':'/project','description':'Project Filesystem'}, 
#                                {'name':'STORE', 'path':'/store', 'description':'Long term filesystem'}, 
#                                {'name':'SCRATCH', 'path':'/home', 'description':'Home filesystem'}] }"
F7T_FILESYSTEMS=F7T_FILESYSTEMS="{
                   'cluster': [{'name':'HOME', 'path':'/home', 'description':'Users home filesystem'} , 
                               {'name':'SCRATCH', 'path':'/scratch', 'description':'Scratch filesystem'}] 
                 } " 
#internal machines that microservices connect to (in correlation with SYSTEMS_PUBLIC)
F7T_SYSTEMS_INTERNAL_NAME='cluster:22'
#F7T_SYSTEMS_INTERNAL_STATUS='cluster:22'
#F7T_SYSTEMS_INTERNAL_COMPUTE='cluster:22'
#F7T_SYSTEMS_INTERNAL_STORAGE='cluster:22'
#F7T_SYSTEMS_INTERNAL_UTILITIES='cluster:22'
#-------
# COMPUTE option
# Base filesystem where job submission files will be stored.
# ; separated for system
F7T_COMPUTE_BASE_FS="/home;/home"
# enables the use of a additional plugin in sbatch command for each system
F7T_USE_SPANK_PLUGIN="True;True"
# value of the plugin
F7T_SPANK_PLUGIN_OPTION=--nohome
#-------
# Storage:
# public systems to send a job for internal transfer (xfer), must be defined in SYSTEMS_PUBLIC
F7T_STORAGE_JOBS_MACHINE=system01
# expiration time (in secs) for expiration of URL and files (604800=7 days)
F7T_STORAGE_TEMPURL_EXP_TIME=604800
# staging area max size file supported (in MBytes)
F7T_STORAGE_MAX_FILE_SIZE=512000
# Storage technology used for staging area (swift or s3v2 or s3v4, unset to disable)
F7T_OBJECT_STORAGE='s3v4'
# set if account is needed for SLURM job submission
F7T_USE_SCHED_PROJECT=True
#-------
# STATUS: microservices & systems to pool:
F7T_STATUS_SERVICES='certificator;utilities;compute;tasks;storage;reservations'
F7T_SYSTEMS_INTERNAL_STATUS='system01:22;system02:22'
#-------
# UTILITIES: max size of file for download/upload from filesystem in MB
F7T_UTILITIES_MAX_FILE_SIZE=5
# TIMEOUT in seconds for synchronous tasks
F7T_UTILITIES_TIMEOUT=5
#------
F7T_RESERVATIONS_TIMEOUT=30
#------
# if enabled FirecREST sends a certificate as command, requires a serverside ssh ForceCommand wrapper
F7T_SSH_CERTIFICATE_WRAPPER_USE=True
# OPA Vars
F7T_OPA_USE=True
F7T_OPA_URL=http://opa:8282
F7T_OPA_POLICY_PATH=v1/data/f7t/authz
# SSL vars
F7T_SSL_USE=True
F7T_SSL_CRT=/ssl/f7t_internal.crt
F7T_SSL_KEY=/ssl/f7t_internal.key
