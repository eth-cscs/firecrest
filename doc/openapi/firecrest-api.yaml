##
##  Copyright (c) 2019-2023, ETH Zurich. All rights reserved.
##
##  Please, refer to the LICENSE file in the root directory.
##  SPDX-License-Identifier: BSD-3-Clause
##
openapi: 3.0.0
servers:
  - url: "http://localhost:8000"
info:
  version: 1.13.1
  title: FirecREST API
  description: >
    FirecREST platform, a RESTful Services Gateway to HPC resources, is a
    high-performance and reusable framework that integrates with existing HPC
    infrastructure, thus enabling the access to HPC resources to web-enabled
    services.


    FirecREST provides a REST API that defines a set of functions through which
    developers can interact with using the HTTP/REST protocol architecture.
    Calls to the REST API received by the services gateway are translated into
    the appropriate infrastructure requests. Among the most prominent services
    that FirecREST exposes we find authentication and authorization, system
    status, file-system access, data mover, execution of parallel jobs,
    accounting information, etc.
paths:
  '/status/services':
    get:
      summary: List of services
      description: >-
        Returns a list containing all available micro services with a name,
        description, and status.
      tags:
        - Status
      responses:
        '200':
          description: List of services with status and description.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Services'
        '400':
          $ref: '#/components/responses/Standard400Error'
  '/status/services/{servicename}':
    parameters:
      - name: servicename
        in: path
        description: The service name
        required: true
        schema:
          type: string
    get:
      summary: Get service information
      description: >-
        Returns a single service descriptor (name, description and status) from its name.
      tags:
        - Status
      responses:
        '200':
          description: Service information
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service does not exists
  '/status/systems':
    get:
      summary: List of systems
      description: Returns a list containing all available systems and response status.
      tags:
        - Status
      # parameters:
      #   - $ref: '#/components/parameters/pageSize'
      #   - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: List of systems with status and description
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Systems'
        '400':
          $ref: '#/components/responses/Standard400Error'
        '500':
          $ref: '#/components/responses/Standard500Error'
  '/status/systems/{machinename}':
    parameters:
      - name: machinename
        in: path
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Get system information
      description: Returns a single system from its name.
      tags:
        - Status
      responses:
        '200':
          description: System information
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/System'
        '404':
          description: System does not exists
  '/status/parameters':
    get:
      summary: List of API parameters
      description: Returns list of parameters that can be configured in environment files.
      tags:
        - Status
      responses:
        '200':
          description: List of parameters and values
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Parameters'

  '/utilities/ls':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: List directory contents
      description: >-
        Returns a list of contents at the specified path on the {X-Machine-Name}
        filesystem.
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Absolute path to destination
          required: true
          schema:
            type: string
          allowReserved: true
        - name: showhidden
          in: query
          description: Show entries starting with '.'
          schema:
            type: boolean
        # - $ref: '#/components/parameters/pageSize'
        # - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: List of contents of path
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Files-metadata'
        '400':
          description: Error listing contents of path
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/mkdir':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Creates a directory
      description: 'Create a directory at the specified path on the {X-Machine-Name} filesystem.'
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
                p:
                  type: string
                  description: No error if existing, make parent directories as needed
              required:
                - targetPath
              example:
                targetPath: /home/user/newdir
                p:
      responses:
        '201':
          description: Directory created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Error creating directory
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Exists:
              description: <path> already exists
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/rename':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    put:
      summary: 'Rename/move a file, directory, or symlink'
      description: >-
        Rename/move a file, directory, or symlink at the sourcePath to
        the targetPath on the {X-Machine-Name} filesystem.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data': # FIXME: this doesn't work for put requests
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: Absolute path to source
                targetPath:
                  type: string
                  description: Absolute path to destination
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/file
                targetPath: /home/user/file-renamed
      responses:
        '200':
          description: Success to rename file or directory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Error on rename operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Not-Found:
              description: <oldpath> not found
              schema:
                type: string
            X-Exists:
              description: <newpath> already exists
              schema:
                type: string
            X-Invalid-Path:
              description: <oldpath> and/or <newpath> are invalid paths
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/chmod':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    put:
      summary: Change file mode bits
      description: Change the file mod bits of a given file according to the specified mode.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data': # FIXME: this doesn't work for put requests
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
                mode:
                  type: string
                  description: Same as numeric mode of linux chmod tool
              required:
                - targetPath
                - mode
              example:
                targetPath: /home/user/file
                mode: "700"
      responses:
        '200':
          description: Operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Error in chmod operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
            X-Invalid-Mode:
              description: <mode> is an invalid mode
              schema:
                type: string
  '/utilities/chown':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    put:
      summary: Change file owner and group
      description: >-
        Changes the user and/or group ownership of a given file. If only owner
        or group information is passed, only that information will be updated.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
                owner:
                  type: string
                  description: Owner username for target
                group:
                  type: string
                  description: group username for target
              required:
                - targetPath
              example:
                targetPath: /home/user/file
                owner: newOwner
                group: newGroup
      responses:
        '200':
          description: Operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Error in chwon operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
            X-Invalid-Owner:
              description: <owner> is an invalid user
              schema:
                type: string
            X-Invalid-Group:
              description: <group> is an invalid group
              schema:
                type: string
  '/utilities/copy':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Copy file from a filesystem path to another
      description: >-
        Copies file from {sourcePath} to {targetPath}.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: Absolute filesystem path to file to be copied
                targetPath:
                  type: string
                  description: Absolute filesystem path where the {sourcePath} is copied
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/file
                targetPath: /home/user/file-copied
      responses:
        '201':
          description: Object copy succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Error in copy operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
            X-Exists:
              description: <targetPath> already exists
              schema:
                type: string
            X-Not-Found:
              description: <sourcePath> not found
              schema:
                type: string
  '/utilities/file':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: determine file type
      description: Uses the file linux application to determine the type of a file on the
        {X-Machine-Name} filesystem.
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Absolute filesystem path
          required: true
          allowEmptyValue: false
          schema:
            type: string
          allowReserved: true
      responses:
        '200':
          description: Operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Error in file operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
        '401':
          description: No auth header given
          content:
            text/plain:
              schema:
                type: string
  '/utilities/head':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Prints first part of a file
      description: >-
        Returns the first part (10 lines by default) from a file. Options 'bytes' and 'lines' can not
        by specified simultaneously.
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Absolute path to destination
          required: true
          schema:
            type: string
          allowReserved: true
        - name: bytes
          in: query
          description: Returns the first N bytes, accepts K, KB, MB, etc
          schema:
            type: string
        - name: lines
          in: query
          description: Returns the first N lines, accepts K, KB, MB, etc
          schema:
            type: string
        - name: skip_ending
          in: query
          description: The output will be the whole file, without the last NUM bytes/lines of each file. NUM should be specified in the respective argument through `bytes` or `lines`.
          schema:
            type: string
      responses:
        '200':
          description: File content successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Failed to return file content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid.
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/stat':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: determines the status of a file
      description: Uses the stat application to determine the status of a file on the
        {X-Machine-Name} filesystem. The options are "%f %i %d %h %u %g %s %X %Y %Z"
        and the outputs are converted to integers.
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Absolute filesystem path
          required: true
          allowEmptyValue: false
          schema:
            type: string
          allowReserved: true
        - name: dereference
          in: query
          description: Follow symbolic links
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File-Stat-metadata'
        '400':
          description: Error on stat operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Not-A-Directory:
              description: targetPath is not a directory
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string            
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string

        '401':
          description: No auth header given
          content:
            text/plain:
              schema:
                type: string
  '/utilities/symlink':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Create a symlink
      description: Create a symbolic link (symlink) on the
        {X-Machine-Name} filesystem.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                linkPath:
                  type: string
                  description: Absolute path to the new symlink
                targetPath:
                  type: string
                  description: Absolute filesystem path to target that the symlink will point to
              required:
                - linkPath
                - targetPath
              example:
                targetPath: /home/user/file
                linkPath: /home/user/file-linked

      responses:
        '201':
          description: Success create the symlink
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Failed to create symlink
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Exists:
              description: <source> already exists
              schema:
                type: string
            X-Invalid-Path:
              description: <target> and/or <source> are invalid paths
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/tail':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Prints last part of a file
      description: >-
        Returns the last part (10 lines by default) from a file. Options 'bytes' and 'lines' can not
        by specified simultaneously.
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Absolute path to destination
          required: true
          schema:
            type: string
          allowReserved: true
        - name: bytes
          in: query
          description: Returns the last N bytes, accepts K, KB, MB, etc
          schema:
            type: string
        - name: lines
          in: query
          description: Returns the last N lines, accepts K, KB, MB, etc
          schema:
            type: string
        - name: skip_beginning
          in: query
          description: The output will start with byte/line NUM of each file. NUM should be specified in the respective argument through `bytes` or `lines`.
          schema:
            type: boolean
      responses:
        '200':
          description: File content successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Failed to return file content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid.
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/download':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Download a small file (binary or text)
      description: >-
        Blocking call that returns the file from the specified path on the
        {X-Machine-Name} filesystem.
      tags:
        - Utilities
      parameters:
        - name: sourcePath
          in: query
          description: Path to the file to download
          required: true
          schema:
            type: string
          allowReserved: true
      responses:
        '200':
          description: Returns the file as part of the response body
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Failed to download file
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Invalid-Path:
              description: <path> is invalid
              schema:
                type: string
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Size-Limit:
              description: File exceeds size limit
              schema:
                type: string            
  '/utilities/upload':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Uploads a small file
      description: 'Uploads a file to the specified path on the {X-Machine-Name} filesystem.'
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to be uploaded
                targetPath:
                  type: string
                  description: Absolute path to destination
              required:
                - file
                - targetPath
              example:
                file: "@/home/local/file"
                targetPath: /home/user/remotefile
      responses:
        '201':
          description: File upload successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Failed to upload file
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid.
              schema:
                type: string
  '/utilities/rm':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    delete:
      summary: Delete a small file
      description: 'Delete a file to the specified path on the {X-Machine-Name} filesystem.'
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data': # FIXME
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
              required:
                - targetPath
              example:
                targetPath: /home/user/remotefile
      responses:
        '204':
          description: File deletion successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Failed to delete file
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid.
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/checksum':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Calculate the checksum of a given file
      description: 'Calculate the SHA256 (256-bit) checksum of a specified file in {targetPath} on the {X-Machine-Name} filesystem.'
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Path to the file to calculate checksum
          required: true
          schema:
            type: string
          allowReserved: true
      responses:
        '200':
          description: Checksum successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Error obatining checksum
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid.
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
            X-A-Directory:
              description: <targetPath> is a directory, can't checksum directories
              schema:
                type: string
  '/utilities/view':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: View the content of a plain text file (UTF8)
      description: 'View the content of a plain text file (UTF8 chars only) in {targetPath} on the {X-Machine-Name} filesystem.'
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Path to the file to view
          required: true
          schema:
            type: string
          allowReserved: true
      responses:
        '200':
          description: File content successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'
        '400':
          description: Failed to view file content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-A-Directory:
              description: <targetPath> is a directory, can't checksum directories
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid
              schema:
                type: string
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Size-Limit:
              description: File exceeds size limit
              schema:
                type: string            
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
            
  '/utilities/whoami':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Returns current system username
      description: 'Returns the current username on the {X-Machine-Name}.'
      tags:
        - Utilities
      responses:
        '200':
          description: Username successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-ok'

        '400':
          description: Failed to return username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilities-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/compute/jobs/upload':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Submit Job by uploading a local sbatch file
      description: >-
        Non-blocking call. Submits a batch script to SLURM on the target system.
        The batch script is uploaded as a file to the microservice which then
        stores it in a temporal directory in preparation to be submitted to the
        workload manager. The operation returns the task id associated to the
        Task microservice that will contain information of the SLURM job once
        it is created.
      tags:
        - Compute
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: SBATCH script file to be submitted to SLURM
                account:
                  type: string
                  description: Name of the account associated to the user in the scheduler. If not set, the one incuded in the sbatch file is taken.
              required:
                - file
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
            X-sbatch-error:
              description: sbatch returned error
              schema:
                type: integer
  '/compute/jobs/path':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Submit Job by a given remote sbatch file
      description: >-
        Non-blocking call. Submits a batch script to SLURM on the target system.
        The batch script is uploaded as a file to the microservice which then
        stores it in a temporal directory in preparation to be submitted to the
        workload manager. The operation returns the task id associated to the
        Task microservice that will contain information of the SLURM job once
        it is created.
      tags:
        - Compute
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: path to the SBATCH script file stored in {X-Machine-Name} machine to be submitted to SLURM
                account:
                  type: string
                  description: Name of the account associated to the user in the scheduler. If not set, the one incuded in the sbatch file is taken.
              required:
                - targetPath
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
            X-sbatch-error:
              description: sbatch returned error
              schema:
                type: integer
  '/compute/jobs':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Retrieves information from all jobs
      description: Information about jobs on the SLURM scheduling queue. This call uses the `squeue` command.
      tags:
        - Compute
      parameters:
        - name: jobs
          in: query
          description: Comma-separated list of job IDs to retrieve.
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
  '/compute/jobs/{jobid}':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
      - name: jobid
        in: path
        description: ID of the job
        required: true
        schema:
          type: string
    get:
      summary: Retrieves information from a job
      description: Information about a job on the SLURM scheduling queue. This call uses the `squeue` command.
      tags:
        - Compute
      responses:
        '200':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
    delete:
      summary: Delete Job
      description: Cancel job from SLURM, using the `scancel` command.
      tags:
        - Compute
      responses:
        '204':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
  '/compute/acct':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Job account information
      description: >-
        Reports accounting data of job in the SLURM job accounting log, this
        includes information from completed jobs. This call uses the `sacct` command.
      tags:
        - Compute
      parameters:
        - name: jobs
          in: query
          description: Comma-separated list of job IDs to retrieve
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - name: starttime
          in: query
          description: Start date/time of job's query. Allowed formats are HH:MM[:SS] [AM|PM]
            MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]
            MM/DD[/YY]-HH:MM[:SS]
            YYYY-MM-DD[THH:MM[:SS]]
          required: false
          schema:
            type: string
        - name: endtime
          in: query
          description: End time (and/or date) of sacct query. Allowed formats are
            HH:MM[:SS] [AM|PM]
            MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]
            MM/DD[/YY]-HH:MM[:SS]
            YYYY-MM-DD[THH:MM[:SS]]
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
  '/storage/xfer-internal/rsync':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: rsync
      description: >-
        Data transfer between internal CSCS file systems. To transfer files and
        folders from `/users`, `/project` or `/store` to the `/scratch` file systems for
        stage-in or stage-out jobs. Reference:
        https://user.cscs.ch/storage/transfer/internal/
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: Source path to the location filesystem
                targetPath:
                  type: string
                  description: Absolute path to destination
                jobName:
                  type: string
                  description: job name the rsync operation
                  default: rsync-job
                time:
                  type: string
                  description: >-
                    Limit on the total run time of the rsync. Acceptable time formats
                    \'minutes\',   \'minutes:seconds\',   \'hours:minutes:seconds\',
                    \'days-hours\', \'days-hours:minutes\' and
                    \'days-hours:minutes:seconds\'. Note: for stage-in queue a slurm
                    xfer job.
                  default: '02:00:00'
                stageOutJobId:
                  type: string
                  description: Move data after job with id {stageOutJobId} is completed
                  default: null
                account:
                  type: string
                  description: Name of the account associated to the user in the scheduler. If not set, system default is taken.
                  default: null
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/origin
                targetPath: /home/user/destination
                jobName: rsync-firecrest-job
                stageOutJobId: "123456"
                time: "2-03:00:00"
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
  '/storage/xfer-internal/mv':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: move (rename) files
      description: >-
        'Move files between internal CSCS file systems. Rename sourcePath to
        targetPath, or move sourcePath to targetPath /users, /project or /store
        to the /scratch file systems. Possible to stage-out jobs providing the
        SLURM Id of a production job. Reference:
        https://user.cscs.ch/storage/data_transfer/internal_transfer/'
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: source path to the location filesystem
                targetPath:
                  type: string
                  description: Absolute path to destination
                jobName:
                  type: string
                  description: job name the rename operation
                  default: mv-job
                time:
                  type: string
                  description: >-
                    'Limit on the total run time of the rename. Acceptable time formats
                    \'minutes\',   \'minutes:seconds\',   \'hours:minutes:seconds\',
                    \'days-hours\', \'days-hours:minutes\' and
                    \'days-hours:minutes:seconds\'. Note: for stage-in queue a slurm
                    xfer job.'
                  default: '02:00:00'
                stageOutJobId:
                  type: string
                  description: Move data after job with id {stageOutJobId} is completed
                  default: null
                account:
                  type: string
                  description: Name of the account associated to the user in the scheduler. If not set, system default is taken.
                  default: null
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/origin
                targetPath: /home/user/destination
                jobName: mv-firecrest-job
                stageOutJobId: "123456"
                time: "2-03:00:00"
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
  '/storage/xfer-internal/cp':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: copy files and directories
      description: >-
        'Copy files and directories between internal CSCS file systems. Copy
        sourcePath to targetPath /users, /project or /store to the /scratch file
        systems. Possible to stage-out jobs providing the SLURM Id of a
        production job. Reference:
        https://user.cscs.ch/storage/data_transfer/internal_transfer/'
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: source path to the location filesystem
                targetPath:
                  type: string
                  description: Absolute path to destination
                jobName:
                  type: string
                  description: job name the copy operation
                  default: cp-job
                time:
                  type: string
                  description: >-
                    'Limit on the total run time of the copy. Acceptable time formats
                    \'minutes\',   \'minutes:seconds\',   \'hours:minutes:seconds\',
                    \'days-hours\', \'days-hours:minutes\' and
                    \'days-hours:minutes:seconds\'. Note: for stage-in queue a slurm
                    xfer job.'
                  default: '02:00:00'
                stageOutJobId:
                  type: string
                  description: Copy data after job with id {stageOutJobId} is completed
                  default: null
                account:
                  type: string
                  description: Name of the account associated to the user in the scheduler. If not set, system default is taken.
                  default: null
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/origin
                targetPath: /home/user/destination
                jobName: cp-firecrest-job
                stageOutJobId: "123456"
                time: "2-03:00:00"
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
  '/storage/xfer-internal/rm':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: remove files or directories
      description: >-
        'Remove files or directories in the internal CSCS file systems, with
        options rm -rf. With targetPath pointing to file system /users,
        /project, /store, or /scratch. Possible to stage-out jobs providing the
        SLURM Id of a production job. Reference:
        https://user.cscs.ch/storage/data_transfer/internal_transfer/'
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
                jobName:
                  type: string
                  description: job name the remove operation
                  default: rm-job
                time:
                  type: string
                  description: >-
                    'Limit on the total run time of the rm. Acceptable time formats
                    \'minutes\',   \'minutes:seconds\',   \'hours:minutes:seconds\',
                    \'days-hours\', \'days-hours:minutes\' and
                    \'days-hours:minutes:seconds\'. Note: for stage-in queue a slurm
                    xfer job.'
                  default: '02:00:00'
                stageOutJobId:
                  type: string
                  description: Delete data after job with id {stageOutJobId} is completed
                  default: null
                account:
                  type: string
                  description: Name of the account associated to the user in the scheduler. If not set, system default is taken.
                  default: null
              required:
                - targetPath
              example:
                targetPath: /home/user/file-to-delete
                jobName: rm-firecrest-job
                stageOutJobId: "123456"
                time: "2-03:00:00"
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
  '/storage/xfer-external/upload':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Upload a file
      description: >-
        Starts an asynchronous upload to a specific path, the upload workflow is
        coordinated by a task in the Tasks microservice. This returns a task
        task that will provide a persisten URL at which the target file can be
        uploaded to, the persistent URL is encoded with a random hash and is
        available for an extended period of time (it does not depend on the
        lifetime of the OIDC token).

      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: source path to the file in local machine
                targetPath:
                  type: string
                  description: absolute path to destination (directory or file)
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/local_user/origin
                targetPath: /home/user/destination
                update: false
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access path
              schema:
                type: integer
            X-Not-Found:
              description: targetPath not found
              schema:
                type: integer
            X-Invalid-Path:
              description: targetPath is an invalid path.
              schema:
                type: integer
            X-Not-A-Directory:
              description: targetPath is not a directory
              schema:
                type: string
            X-Error:
              description: Error
              schema:
                type: string
  '/storage/xfer-external/download':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Download a file
      description: >-
        Start an asynchronous download by creating a new task in the Tasks
        microservice. The new task will first copy the file to the file transfer
        server, once this copy has been completed a persisten URL will be
        provided by the task. This persistent URL is encoded with a random hash
        and is available for an extended period of time (it does not depend on
        the lifetime of the OIDC token).
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: source path to the file in remote filesystem
              required:
                - sourcePath
              example:
                sourcePath: /home/user/file
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Success'
        '400':
          description: Task creation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access path
              schema:
                type: string
            X-Not-Found:
              description: targetPath not found
              schema:
                type: string
            X-Invalid-Path:
              description: targetPath is an invalid path.
              schema:
                type: string
            X-A-Directory:
              description: targetPath is a directory, can't download directories
              schema:
                type: string
            X-Error:
              description: Error
              schema:
                type: string
  '/storage/xfer-external/invalidate':
    post:
      summary: Invalidate temporary URL
      description: >-
        Remove a temporary URL attached to a given Task Id
      tags:
        - Storage
      parameters:
        - in: header
          name: X-Task-Id
          description: Task Id associated to the upload/download task
          required: true
          schema:
            type: string
      responses:
        '201':
          description: URL invalidated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invalidate-ok'
        '400':
          description: Error invalidating URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
  '/tasks':
    get:
      summary: Returns all tasks (or a subset)
      description: List all recorded tasks and their status.
      tags:
        - Tasks
      parameters:
        - in: query
          name: tasks
          schema:
            type: string
          description: Comma-separated list of `{task_id}`
          required: false
      responses:
        '200':
          description: tasks in queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
  '/tasks/{taskid}':
    parameters:
      - name: taskid
        in: path
        description: id of task
        required: true
        schema:
          type: string
    get:
      summary: Task status information
      description: A long running task progress and result is tracked through a {taskid}.
      tags:
        - Tasks
      responses:
        '200':
          description: >-
              Current status of a task with `taskid`.
              Depending on the type of task (`Compute` or `Storage`) and of the current status, the schema could change.
              Check the field `status` to match the specific response.
          content:
            object:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Task-100'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-110'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-111'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-112'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-113'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-114'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-115'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Download-116'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Download-117'
                  - $ref: '#/components/schemas/Task-Storage-Ext-Download-118'
                  - $ref: '#/components/schemas/Task-Compute-Job-Submitted-200'
                  - $ref: '#/components/schemas/Task-Compute-Job-Submitted-400'
                  - $ref: '#/components/schemas/Task-Compute-Job-Listed-200'
                  - $ref: '#/components/schemas/Task-Compute-Job-Listed-400'
                  - $ref: '#/components/schemas/Task-Compute-Acct-200'
                  - $ref: '#/components/schemas/Task-Compute-Acct-400'
                  - $ref: '#/components/schemas/Task-Compute-Delete-200'
                  - $ref: '#/components/schemas/Task-Compute-Delete-400'
  '/reservations':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Returns all reservations
      description: List all active reservations and their status
      tags:
        - Reservation
      responses:
        '200':
          description: Reservation list returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: '#/components/schemas/Reservations'
        '400':
          description: Error listing reservations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: integer
        '404':
          description: Error listing reservations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task-Creation-Error'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer

    post:
      summary: Creates a new reservation
      description: Creates a new reservation with {reservation} name for a given SLURM groupname
      tags:
        - Reservation
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                reservation:
                  type: string
                  description: name of the reservation
                account:
                  type: string
                  description: name of the account in SLURM to which the reservation is made for
                numberOfNodes:
                  type: string
                  description: number of nodes needed for the reservation
                nodeType:
                  type: string
                  description: type of node
                  default: knl
                starttime:
                  type: string
                  description: start time for reservation (YYYY-MM-DDTHH:MM:SS)
                endtime:
                  type: string
                  description: end time for reservation (YYYY-MM-DDTHH:MM:SS)
              required:
                - reservation
                - account
                - numberOfNodes
                - nodeType
                - starttime
                - endtime
              example:
                reservation: selvedas
                project: psigroup
                numberOfNodes: 10
                nodeType: knl
                starttime: '2020-12-24T00:00:00'
                endtime: '2020-12-24T12:30:00'
      responses:
        '201':
          description: Reservation succesfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: "Reservation created: {reservation}"
        '400':
          description: Error creating reservation
          content:
            'application/json':
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error creating reservation {reservation}"
                  description:
                    type: string
                    example: "Error: invalid start time reservation"
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Error:
              description: Error
              schema:
                type: integer
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: integer
        '404':
          description: Error creating reservation
          content:
            'application/json':
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error creating reservation {reservation}"
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
  '/reservations/{reservation}':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
      - in: path
        name: reservation
        description: reservation name
        required: true
        schema:
          type: string
    put:
      summary: Updates reservation {reservation}
      description: Updates an already created reservation named {reservation}
      tags:
        - Reservation
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                numberOfNodes:
                  type: string
                  description: number of nodes needed for the reservation
                nodeType:
                  type: string
                  description: type of node
                  default: knl
                starttime:
                  type: string
                  description: start time for reservation (YYYY-MM-DDTHH:MM:SS)
                endtime:
                  type: string
                  description: end time for reservation (YYYY-MM-DDTHH:MM:SS)
              required:
                - reservation
                - numberOfNodes
                - nodeType
                - starttime
                - endtime
              example:
                reservation: selvedas
                project: psigroup
                numberOfNodes: 10
                nodeType: knl
                starttime: '2020-12-24T00:00:00'
                endtime: '2020-12-24T12:30:00'
      responses:
        '200':
          description: Reservation succesfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: "Reservation {reservation} updated"
        '400':
          description: Error updating reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error updating reservation {reservation}"
                  description:
                    type: string
                    example: "Error: {reservation} doesn't seem to be a valid reservation"
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Error:
              description: Error
              schema:
                type: integer
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: integer
        '404':
          description: Error updating reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error updating reservation {reservation}"
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer

    delete:
      summary: Deletes reservation {reservation}
      description: Deletes an already created reservation named {reservation}
      tags:
        - Reservation
      responses:
        '204':
          description: Reservation succesfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: "Reservation {reservation} removed"
        '400':
          description: Error deleting reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error deleting reservation {reservation}"
                  description:
                    type: string
                    example: "Error: You are not an owner of the reservation"
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Error:
              description: Error
              schema:
                type: integer
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: integer
        '404':
          description: Error deleting reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error deleting reservation {reservation}"
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  parameters:
    machinename:
      name: machineName
      in: path
      description: The system name
      required: true
      schema:
        type: string
    pageSize:
      name: pageSize
      in: query
      description: Number of entries returned
      schema:
        type: integer
        enum:
          - 10
          - 25
          - 50
          - 100
        default: 25
    pageNumber:
      name: pageNumber
      in: query
      description: Page number
      schema:
        type: integer
        default: 0
    path:
      name: path
      in: query
      description: Filesystem path
      schema:
        type: string
      allowReserved: true
  responses:
    QueryParameter400Error:
      description: Bad request
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Utilities-notok'
    Standard400Error:
      description: Bad Request error
    Standard500Error:
      description: An unexpected error occured
  schemas:
    File-metadata:
      required:
        - name
        - type
        - link_target
        - user
        - group
        - permissions
        - last_modified
        - size
      properties:
        name:
          type: string
        type:
          type: string
        link_target:
          type: string
        user:
          type: string
        group:
          type: string
        permissions:
          type: string
        last_modified:
          type: string
        size:
          type: string
    Files-metadata:
      type: object
      properties:
        description:
          type: string
          enum:
            - "List of contents"
        output:
          type: array
          items:
            $ref: '#/components/schemas/File-metadata'
    File-Stat-metadata:
      type: object
      properties:
        description:
          type: string
        output:
          type: object
          properties:
            mode:
              type: integer
              description: Integer value of raw mode
              example: 33188
            ino:
              type: integer
              description: Inode number
              example: 5000000
            dev:
              type: integer
              description: Device number
              example: 64002
            uid:
              type: integer
              description: User ID
              example: 1000
            gid:
              type: integer
              description: Group ID
              example: 1000
            size:
              type: integer
              description: File size
              example: 1
            atime:
              type: integer
              description: time of last access as seconds since Epoch
              example: 1623000000
            ctime:
              type: integer
              description: time of last status change as seconds since Epoch
              example: 1623000000
            mtime:
              type: integer
              description: time of last modification as seconds since Epoch
              example: 1623000000
    System:
      required:
        - system
      properties:
        system:
          type: string
        status:
          type: string
          enum:
            - available
            - unavailable
        description:
          type: string
    Systems:
      type: object
      properties:
        description:
          type: string
          enum:
            - "List of systems with status and description."
        out:
          type: array
          items:
            $ref: '#/components/schemas/System'
    Parameters:
      type: object
      properties:
        description:
          type: string
          enum:
            - "Firecrest's parameters"
        out:
          type: object
          properties:
            storage:
              type: object
              properties:
                name:
                  type: string
                value:
                  type: string
                unit:
                  type: string
            utilities:
              type: object
              properties:
                name:
                  type: string
                value:
                  type: string
                unit:
                  type: string
    Service:
      required:
        - service
      properties:
        service:
          type: string
        status:
          type: string
          enum:
            - available
            - unavailable
        status_code:
          type: integer
        description:
          type: string
    Services:
      type: object
      properties:
        description:
          type: string
          enum:
            - 'List of services with status and description.'
        out:
          type: array
          items:
            $ref: '#/components/schemas/Service'
    Job:
      type: object
      required:
        - jobid
      properties:
        jobid:
          type: string
        partition:
          type: string
        name:
          type: string
        user:
          type: string
        state:
          type: string
        start_time:
          type: string
        time:
          type: string
        time_left:
          type: string
        nodes:
          type: string
        nodelist:
          type: string
    Jobs:
      type: array
      items:
        $ref: '#/components/schemas/Job'
    Session:
      properties:
        authenticated:
          type: boolean
        username:
          type: string
        domain:
          type: string
        session_time:
          type: string
        session_id:
          type: string
    Task:
      type: object
      properties:
        task_id:
          type: string
        hash_id:
          type: string
        description:
          type: string
        data:
          type: object
        created_at:
          type: string
        updated_at:
          type: string
        last_modify:
          type: string
        user:
          type: string
        status:
          type: string
        service:
          type: string
        system:
          type: string
        task_url:
          type: string
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Task-Creation-Success:
      type: object
      properties:
        success:
          type: string
        task_url:
          type: string
        task_id:
          type: string
    Task-Creation-Error:
      type: object
      properties:
        error:
          type: string
    Utilities-ok:
      type: object
      properties:
        description:
          type: string
        output:
          type: string
    Utilities-notok:
      type: object
      properties:
        description:
          type: string
        error:
          type: string
    Invalidate-ok:
      type: object
      properties:
        success:
          type: string
    Reservation:
      type: object
      properties:
        reservationname:
          type: string
        starttime:
          type: string
        endtime:
          type: string
        duration:
          type: string
        nodes:
          type: string
        nodecnt:
          type: string
        corecnt:
          type: string
        features:
          type: string
        partitionname:
          type: string
        flags:
          type: string
        users:
          type: string
        accounts:
          type: string
        licenses:
          type: string
        state:
          type: string
        burstbuffer:
          type: string
        watts:
          type: string

    Reservations:
      type: array
      items:
        $ref: '#/components/schemas/Reservation'
    Task-100:
      type: object
      description: Task has been created and is queued
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task (Queued)
        data:
          type: object
          description: Data concerning the status of the task
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"100"``)
        service:
          type: string
          description: FirecREST service that is related to the task (`"compute"` or `"storage"`)
        system:
          type: string
          description: system for which the task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Upload-110:
      type: object
      description: Task information about progress in a task created with `POST /storage/xfer-external/upload`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Waiting for Form URL from Object Storage to be retrieved')
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            user:
              type: string
              description: Task owner user name
            msg:
              type: string
              description: Message concerning current operations on the task
            system_name:
              type: string
              description: Target system public name
            system_addr:
              type: string
              description: Target system private name
            target:
              type: string
              description: Path to the destination of the file in target system
            source:
              type: string
              description: Local path to the file to be uploaded
            status:
              type: string
              description: Status code (`"110"`)
            hash_id:
              type: string
              description: for internal use of FirecREST
            trace_id:
              type: string
              description: for internal use of FirecREST
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"110"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"storage"`)
        system:
          type: string
          description: system for which the storage task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Upload-111:
      type: object
      description: Task information about progress in a task created with `POST /storage/xfer-external/upload`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task (Form URL from Object Storage received)
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            user:
              type: string
              description: Task owner user name
            msg:
              type: object
              description: Data concerning current operations on the task
              properties:
                command:
                  type: string
                  description: cURL command to execute object upload to Object Storage server
                parameters:
                  type: object
                  description: parameters to be used with an data transfer software or library
                  properties:
                    method:
                      type: string
                      description: 'HTTP method to be used (POST, PUT). eg: with cURL `curl -X {method}`'
                    url:
                      type: string
                      description: URL to be used to upload the object
                    data:
                      type: object
                      description: 'HTTP POST Data object in the form "key: value" (for cURL, option `-d`)'
                    files:
                      type: string
                      description: 'file object in HTTP form form with `-H "Content-Type: multipart/form-data"`'
                    json:
                      type: object
                      description: 'HTTP JSON object in the form key: value, to be used in HTTP with `-H "Content-Type: application/json"`'
                      default: {}
                    headers:
                      description: 'HTTP Header object in the form key: value'
                      default: {}
                    params:
                      description: 'HTTP Parameter object in the form key: value'
                      default: {}
            system_name:
              type: string
              description: Target system public name
            system_addr:
              type: string
              description: Target system private name
            target:
              type: string
              description: Path to the destination of the file in target system
            source:
              type: string
              description: Local path to the file to be uploaded
            status:
              type: string
              description: Status code ("111")
            hash_id:
              type: string
              description: for internal use of FirecREST
            trace_id:
              type: string
              description: for internal use of FirecREST
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"111"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"storage"`)
        system:
          type: string
          description: system for which the storage task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Upload-112:
      type: object
      description: Task information about progress in a task created with `POST /storage/xfer-external/upload`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Object Storage confirms that upload to Object Storage has finished')
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            user:
              type: string
              description: Task owner user name
            msg:
              type: object
              description: Data concerning current operations on the task
              properties:
                command:
                  type: string
                  description: cURL command to execute object upload to Object Storage server
                parameters:
                  type: object
                  description: parameters to be used with an data transfer software or library
                  properties:
                    method:
                      type: string
                      description: 'HTTP method to be used (POST, PUT). eg: with cURL `curl -X {method}`'
                    url:
                      type: string
                      description: URL to be used to upload the object
                    data:
                      type: object
                      description: 'HTTP POST Data object in the form "key: value" (for cURL, option `-d`)'
                    files:
                      type: string
                      description: 'file object in HTTP form form with `-H "Content-Type: multipart/form-data"`'
                    json:
                      type: object
                      description: 'HTTP JSON object in the form key: value, to be used in HTTP with `-H "Content-Type: application/json"`'
                      default: {}
                    headers:
                      description: 'HTTP Header object in the form key: value'
                      default: {}
                    params:
                      description: 'HTTP Parameter object in the form key: value'
                      default: {}
            system_name:
              type: string
              description: Target system public name
            system_addr:
              type: string
              description: Target system private name
            target:
              type: string
              description: Path to the destination of the file in target system
            source:
              type: string
              description: Local path to the file to be uploaded
            status:
              type: string
              description: Status code (`"112"`)
            hash_id:
              type: string
              description: for internal use of FirecREST
            trace_id:
              type: string
              description: for internal use of FirecREST
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"112"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"storage"`)
        system:
          type: string
          description: system for which the storage task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Upload-113:
      type: object
      description: Task information about progress in a task created with `POST /storage/xfer-external/upload`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Download from Object Storage to server has started')
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            user:
              type: string
              description: Task owner user name
            msg:
              type: string
              description: Data concerning current operations on the task
              default: "Download from Object Storage to server has started"
            system_name:
              type: string
              description: Target system public name
            system_addr:
              type: string
              description: Target system private name
            target:
              type: string
              description: Path to the destination of the file in target system
            source:
              type: string
              description: Local path to the file to be uploaded
            status:
              type: string
              description: Status code (`"113"`)
            hash_id:
              type: string
              description: for internal use of FirecREST
            trace_id:
              type: string
              description: for internal use of FirecREST
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"113"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `storage`)
        system:
          type: string
          description: system for which the storage task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Upload-114:
      description: Task information about successful results in a task created with `POST /storage/xfer-external/upload`
      type: object
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Download from Object Storage to server has finished')
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            user:
              type: string
              description: Task owner user name
            msg:
              type: string
              description: Data concerning current operations on the task
              default: "Download from Object Storage to server has finished"
            system_name:
              type: string
              description: Target system public name
            system_addr:
              type: string
              description: Target system private name
            target:
              type: string
              description: Path to the destination of the file in target system
            source:
              type: string
              description: Local path to the file to be uploaded
            status:
              type: string
              description: Status code (`"114"`)
            hash_id:
              type: string
              description: for internal use of FirecREST
            trace_id:
              type: string
              description: for internal use of FirecREST
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"114"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `storage`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Upload-115:
      type: object
      description: Task information about error results in a task created with `POST /storage/xfer-external/upload`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Download from Object Storage error')
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            user:
              type: string
              description: Task owner user name
            msg:
              type: string
              description: Data concerning current operations on the task
              default: "Download from Object Storage error"
            system_name:
              type: string
              description: Target system public name
            system_addr:
              type: string
              description: Target system private name
            target:
              type: string
              description: Path to the destination of the file in target system
            source:
              type: string
              description: Local path to the file to be uploaded
            status:
              type: string
              description: Status code (`"115"`)
            hash_id:
              type: string
              description: for internal use of FirecREST
            trace_id:
              type: string
              description: for internal use of FirecREST
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"115"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"storage"`)
        system:
          type: string
          description: system for which the storage task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Download-116:
      type: object
      description: Task information about progress in a task created with `POST /storage/xfer-external/download`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Started upload from filesystem to Object Storage')
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            error:
              type: string
              description: Error message, if any
            source:
              type: string
              description: Local path to the file to be downloaded
            system_name:
              type: string
              description: system where the file to download is located
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"116"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"storage"`)
        system:
          type: string
          description: system for which the storage task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Download-117:
      type: object
      description: Task information about successful results in a task created with `POST /storage/xfer-external/download`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Upload from filesystem to Object Storage has finished succesfully')
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            url:
              type: string
              description: Download URL
            source:
              type: string
              description: Local path to the file to be downloaded
            system_name:
              type: string
              description: system where the file to download is located
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"117"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"storage"`)
        system:
          type: string
          description: system for which the storage task was created
        task_url:
          type: string
          description: URL of the task
    Task-Storage-Ext-Download-118:
      type: object
      description: Task information about error results in a task created with `POST /storage/xfer-external/download`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Upload from filesystem to Object Storage has finished with errors')
        data:
          type: object
          description: Data concerning the status of the task
          properties:
            error:
              type: string
              description: Error message, if any
            source:
              type: string
              description: Local path to the file to be downloaded
            system_name:
              type: string
              description: system where the file to download is located
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"118"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"storage"`)
        system:
          type: string
          description: system for which the storage task was created
        task_url:
          type: string
          description: URL of the task
    Task-Compute-Job-Submitted-200:
      type: object
      description: Task information about success results in a task created with `POST /compute/jobs/*`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Finished successfully')
        data:
          type: object
          description: Job submission information
          properties:
            result:
              type: string
              description: result of the job submission
              default: "Job submitted"
            jobid:
              type: string
              description: SLURM jobid of the job submitted
            job_file:
              type: string
              description: path (in the target system) of the job batch file executed
              default: "command-not-found"
            job_file_out:
              type: string
              description: path (in the target system) of the job output file
              default: "stdout-file-not-found"
            job_file_err:
              type: string
              description: path (in the target system) of the error job file
              default: "stderr-file-not-found"
            job_data_out:
              type: string
              description: latest content of the job output file
              default: ""
            job_data_err:
              type: string
              description: latest content of the error job file
              default: ""
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"200"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"compute"`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Task-Compute-Job-Submitted-400:
      type: object
      description: Task information about error results in a task created with `POST /compute/jobs/*`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Finished successfully')
        data:
          type: string
          description: Description of the job submission error
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"400"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"compute"`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Task-Compute-Job-Listed-200:
      type: object
      description: Task information about success results in a task created with `GET /compute/jobs/{jobid}`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Finished successfully')
        data:
          type: object
          description: Job listing information
          properties:
            "index":
              type: object
              description: index of the individual job
              properties:
                schema:
                  type: object
                  $ref: "#/components/schemas/Job-Listed-Object"
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"200"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"compute"`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Task-Compute-Job-Listed-400:
      type: object
      description: Task information about error results in a task created with `GET /compute/jobs/{jobid}`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Finished with errors')
        data:
          type: string
          description: Description of the job query error
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"400"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"compute"`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Task-Compute-Acct-200:
      type: object
      description: Task information about success results in a task created with `GET /compute/acct/{jobid}`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Finished successfully')
        data:
          type: array
          items:
            $ref: "#/components/schemas/Job-Listed-Object"
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"200"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"compute"`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Task-Compute-Acct-400:
      type: object
      description: Task information about error results in a task created with `GET /compute/acct/{jobid}`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Finished with errors')
        data:
          type: string
          description: Description of the job accounting error
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"400"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"compute"`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Task-Compute-Delete-200:
      type: object
      description: Task information about success results in a task created with `DELETE /compute/jobs/{jobid}`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Finished successfully')
        data:
          type: string
          description: Success message of job cancelation
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"200"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"compute"`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Task-Compute-Delete-400:
      type: object
      description: Task information about error results in a task created with `DELETE /compute/jobs/{jobid}`
      properties:
        task_id:
          type: string
          description: task unique public identifier
        hash_id:
          type: string
          description: Same value than task_id (preserved for backward compatibility)
        description:
          type: string
          description: Description of the status of the task ('Finished with errors')
        data:
          type: string
          description: Message describing job cancelation error
        created_at:
          type: string
          description: Date and time of the task creation (format=`%Y-%m-%dT%H:%M:%S`)
        updated_at:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        last_modify:
          type: string
          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)
        user:
          type: string
          description: Task owner user name
        status:
          type: string
          description: Status code for this task (`"400"`)
        service:
          type: string
          description: FirecREST service that is related to the task (in this case is always `"compute"`)
        system:
          type: string
          description: system for which the compute task was created
        task_url:
          type: string
          description: URL of the task
    Job-Listed-Object:
      type: object
      properties:
        jobid:
          type: string
          description: SLURM jobid of the job submitted
        partition:
          type: string
          description: partition where the job is running
        name:
          type: string
          description: job name
        user:
          type: string
          description: user name of the job owner
        state:
          type: string
          description: job state as described in https://slurm.schedmd.com/squeue.html#SECTION_JOB-STATE-CODES
        start_time:
          type: string
          description: job actual or expected start time, as described in https://slurm.schedmd.com/squeue.html#OPT_StartTime
        time:
          type: string
          description: job consumed time, as described in https://slurm.schedmd.com/squeue.html#OPT_%M
        time_left:
          type: string
          description: time left for the job to execute, as described in https://slurm.schedmd.com/squeue.html#OPT_%L
        nodes:
          type: string
          description: number of nodes allocated by the job, as described in https://slurm.schedmd.com/squeue.html#OPT_%D
        nodelist:
          type: string
          description: list of nodes allocated by the job, as described in https://slurm.schedmd.com/squeue.html#OPT_%N
        job_file:
          type: string
          description: path (in the target system) of the job batch file executed
          default: "command-not-found"
        job_file_out:
          type: string
          description: path (in the target system) of the job output file
          default: "stdout-file-not-found"
        job_file_err:
          type: string
          description: path (in the target system) of the error job file
          default: "stderr-file-not-found"
        job_data_out:
          type: string
          description: latest content of the job output file
          default: ""
        job_data_err:
          type: string
          description: latest content of the error job file
          default: ""
tags:
  - name: Status
    description: Status information of infrastructure and services.
  - name: Utilities
    description: >-
      Basic system utilities. All calls are blocking and low-latency operations,
      maximum operation duration is limited by a timeout.
  - name: Compute
    description: >-
      Non-blocking calls to workload manager to submit and query jobs. The
      service responds with a reference to the temporary task resource that
      tracks the state of the request.
  - name: Storage
    description: >-
      Non-blocking calls to high-performance storage services. The service
      responds with a reference to the temporary task resource that tracks the
      state of the request.
  - name: Tasks
    description: Access status and response of compute and storage tasks.
security:
  - bearerAuth: []
