openapi: 3.0.0
servers:
  - url: 'http://FIRECREST_URL'
  - url: 'https://FIRECREST_URL'
info:
  version: 1.0.0-RC1
  title: FirecREST API
  description: >
    FirecREST platform, a RESTful Services Gateway to HPC resources, is a
    high-performance and reusable framework that integrates with existing HPC
    infrastructure, thus enabling the access to HPC resources to web-enabled
    services.


    FirecREST provides a REST API that defines a set of functions through which
    developers can interact with using the HTTP/REST protocol architecture.
    Calls to the REST API received by the services gateway are translated into
    the appropriate infrastructure requests. Among the most prominent services
    that FirecREST exposes we find authentication and authorization, system
    status, file-system access, data mover, execution of parallel jobs,
    accounting information, etc.
paths:
  '/status/services':
    get:
      summary: List of services
      description: >-
        Returns a list containing all available micro services with a name,
        description, and status.
      tags:
        - Status
      # parameters:
      #   - $ref: '#/components/parameters/pageSize'
      #   - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: List of services with status and description.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Services'
        '400':
          $ref: '#/components/responses/Standard400Error'
  '/status/services/{servicename}':
    parameters:
      - name: servicename
        in: path
        description: The service name
        required: true
        schema:
          type: string
    get:
      summary: Get service information
      description: >-
        Returns a single service descriptor (name, description and status) from its name.
      tags:
        - Status
      responses:
        '200':
          description: Service information
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service does not exists
  '/status/systems':
    get:
      summary: List of systems
      description: Returns a list containing all available systems and response status.
      tags:
        - Status
      # parameters:
      #   - $ref: '#/components/parameters/pageSize'
      #   - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: List of systems with status and description
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Systems'
        '400':
          $ref: '#/components/responses/Standard400Error'
        '500':
          $ref: '#/components/responses/Standard500Error'
  '/status/systems/{machinename}':
    parameters:
      - name: machinename
        in: path
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Get system information
      description: Returns a single system from its name.
      tags:
        - Status
      responses:
        '200':
          description: System information
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/System'
        '404':
          description: System does not exists
  '/status/parameters':
    get:
      summary: List of API parameters
      description: Returns list of parameters that can be configured in environment files.
      tags:
        - Status
      responses:
        '200':
          description: List of parameters and values
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Parameters'

  '/utilities/ls':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: List directory contents
      description: >-
        Returns a list of contents at the specified path on the {X-Machine-Name}
        filesystem.
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Absolute path to destination
          required: true
          schema:
            type: string
          allowReserved: true
        - name: showhidden
          in: query
          description: Show entries starting with '.'
          schema:
            type: boolean
        # - $ref: '#/components/parameters/pageSize'
        # - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: List of contents of path
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Files-metadata'
        '400':
          description: Error listing contents of path
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/mkdir':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Creates a directory
      description: 'Create a directory at the specified path on the {X-Machine-Name} filesystem.'
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
                p:
                  type: string
                  description: No error if existing, make parent directories as needed
              required:
                - targetPath
              example:
                targetPath: /home/user/newdir
                p:
      responses:
        '201':
          description: Directory created
        '400':
          description: Error creating directory
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Exists:
              description: <path> already exists
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/rename':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    put:
      summary: 'Rename/move a file, directory, or symlink'
      description: >-
        Rename/move a file, directory, or symlink at the sourcePath to
        the targetPath on the {X-Machine-Name} filesystem.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data': # FIXME: this doesn't work for put requests
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: Absolute path to source
                targetPath:
                  type: string
                  description: Absolute path to destination
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/file
                targetPath: /home/user/file-renamed
      responses:
        '200':
          description: Success to rename file or directory
        '400':
          description: Error on rename operation
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Not-Found:
              description: <oldpath> not found
              schema:
                type: string
            X-Exists:
              description: <newpath> already exists
              schema:
                type: string
            X-Invalid-Path:
              description: <oldpath> and/or <newpath> are invalid paths
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/chmod':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    put:
      summary: Change file mode bits
      description: Change the file mod bits of a given file according to the specified mode.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data': # FIXME: this doesn't work for put requests
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
                mode:
                  type: string
                  description: Same as numeric mode of linux chmod tool
              required:
                - targetPath
                - mode
              example:
                targetPath: /home/user/file
                mode: "700"
      responses:
        '200':
          description: Operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application-output'
        '400':
          description: Error in chmod operation
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
            X-Invalid-Mode:
              description: <mode> is an invalid mode
              schema:
                type: string
  '/utilities/chown':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    put:
      summary: Change file owner and group
      description: >-
        Changes the user and/or group ownership of a given file. If only owner
        or group information is passed, only that information will be updated.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
                owner:
                  type: string
                  description: Owner username for target
                group:
                  type: string
                  description: group username for target
              required:
                - targetPath
              example:
                targetPath: /home/user/file
                owner: newOwner
                group: newGroup
      responses:
        '200':
          description: Operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application-output'
        '400':
          description: Error in chwon operation
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
            X-Invalid-Owner:
              description: <owner> is an invalid user
              schema:
                type: string
            X-Invalid-Group:
              description: <group> is an invalid group
              schema:
                type: string
  '/utilities/copy':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Copy file from a filesystem path to another
      description: >-
        Copies file from {sourcePath} to {targetPath}.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: Absolute filesystem path to file to be copied
                targetPath:
                  type: string
                  description: Absolute filesystem path where the {sourcePath} is copied
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/file
                targetPath: /home/user/file-copied
      responses:
        '201':
          description: Object copy succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application-output'
        '400':
          description: Error in copy operation
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
            X-Exists:
              description: <targetPath> already exists
              schema:
                type: string
            X-Not-Found:
              description: <sourcePath> not found
              schema:
                type: string
  '/utilities/file':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: determine file type
      description: Uses the file linux application to determine the type of a file on the
        {X-Machine-Name} filesystem.
      tags:
        - Utilities
      parameters:
        - name: targetPath
          in: query
          description: Absolute filesystem path
          required: true
          allowEmptyValue: false
          schema:
            type: string
          allowReserved: true
      responses:
        '200':
          description: Operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application-output'
        '400':
          description: Error in file operation
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is an invalid path
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
        '401':
          description: No auth header given
          content:
            text/plain:
              schema:
                type: string
  '/utilities/symlink':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Create a symlink
      description: Create a symbolic link (symlink) on the
        {X-Machine-Name} filesystem.
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                linkPath:
                  type: string
                  description: Absolute path to the new symlink
                targetPath:
                  type: string
                  description: Absolute filesystem path to target that the symlink will point to
              required:
                - linkPath
                - targetPath
              example:
                targetPath: /home/user/file
                linkPath: /home/user/file-linked

      responses:
        '201':
          description: Success create the symlink
        '400':
          description: Failed to create symlink
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or paths
              schema:
                type: string
            X-Exists:
              description: <source> already exists
              schema:
                type: string
            X-Invalid-Path:
              description: <target> and/or <source> are invalid paths
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/utilities/download':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Download a small file
      description: >-
        Blocking call that returns the file from the specified path on the
        {X-Machine-Name} filesystem.
      tags:
        - Utilities
      parameters:
        - name: sourcePath
          in: query
          description: Path to the file to download
          required: true
          schema:
            type: string
          allowReserved: true
      responses:
        '200':
          description: Returns the file as part of the response body
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Failed to download file
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid
              schema:
                type: string
  '/utilities/upload':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Uploads a small file
      description: 'Uploads a file to the specified path on the {X-Machine-Name} filesystem.'
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to be uploaded
                targetPath:
                  type: string
                  description: Absolute path to destination
              required:
                - file
                - targetPath
              example:
                file: "@/home/local/file"
                targetPath: /home/user/remotefile
      responses:
        '201':
          description: File upload successful
        '400':
          description: Failed to upload file
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid.
              schema:
                type: string
  '/utilities/rm':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    delete:
      summary: Delete a small file
      description: 'Delete a file to the specified path on the {X-Machine-Name} filesystem.'
      tags:
        - Utilities
      requestBody:
        required: true
        content:
          'multipart/form-data': # FIXME
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
              required:
                - targetPath
              example:
                targetPath: /home/user/remotefile
      responses:
        '204':
          description: File deletion successful
        '400':
          description: Failed to delete file
          content:
            text/plain:
              schema:
                type: string
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: string
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: string
            X-Permission-Denied:
              description: User does not have permissions to access machine or path
              schema:
                type: string
            X-Invalid-Path:
              description: <path> is invalid.
              schema:
                type: string
            X-Timeout:
              description: Command has finished with timeout signal
              schema:
                type: string
  '/compute/jobs':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    post:
      summary: Submit Job
      description: >-
        Non-blocking call. Submits a batch script to SLURM on the target system.
        The batch script is uploaded as a file to the microservice which then
        stores it in a temporal directory in preparation to be submitted to the
        workload manager. The operation returns the task id associated to the
        Task microservice that will contain information of the SLURM job once
        it is created.
      tags:
        - Compute
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: SBATCH script file to be submitted to SLURM
              required:
                - file
      responses:
        '201':
          description: Task for job creation queued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-ok'
        '400':
          description: Failed to submit job file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
            X-sbatch-error:
              description: sbatch returned error
              schema:
                type: integer
    get:
      summary: Retrieves information from all jobs
      description: Information about jobs on the SLURM scheduling queue. This call uses the `squeue` command.
      tags:
        - Compute
      parameters:
        - name: jobs
          in: query
          description: Comma-separated list of job IDs to retrieve.
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jobs'
        '400':
          description: Failed to retrieve job information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
  '/compute/jobs/{jobid}':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
      - name: jobid
        in: path
        description: ID of the job
        required: true
        schema:
          type: string
    get:
      summary: Retrieves information from a job
      description: Information about a job on the SLURM scheduling queue. This call uses the `squeue` command.
      tags:
        - Compute
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Failed to retrieve jobs information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
    delete:
      summary: Delete Job
      description: Cancel job from SLURM, using the `scancel` command.
      tags:
        - Compute
      responses:
        '204':
          description: Job deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jobs'
        '400':
          description: Failed to delete job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
  '/compute/acct':
    parameters:
      - in: header
        name: X-Machine-Name
        description: The system name
        required: true
        schema:
          type: string
    get:
      summary: Job account information
      description: >-
        Reports accounting data of job in the SLURM job accounting log, this
        includes information from completed jobs. This call uses the `sacct` command.
      tags:
        - Compute
      parameters:
        - name: jobs
          in: query
          description: Comma-separated list of job IDs to retrieve
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - name: starttime
          in: query
          description: Start date/time of job's query. Allowed formats are HH:MM[:SS] [AM|PM]
            MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]
            MM/DD[/YY]-HH:MM[:SS]
            YYYY-MM-DD[THH:MM[:SS]]
          required: false
          schema:
            type: string
        - name: endtime
          in: query
          description: End time (and/or date) of sacct query. Allowed formats are
            HH:MM[:SS] [AM|PM]
            MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]
            MM/DD[/YY]-HH:MM[:SS]
            YYYY-MM-DD[THH:MM[:SS]]
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jobs'
        '400':
          description: Failed to retrieve account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Machine-Does-Not-Exist:
              description: Machine does not exist
              schema:
                type: integer
            X-Machine-Not-Available:
              description: Machine is not available
              schema:
                type: integer
            X-Permission-Denied:
              description: User does not have permissions to access machine
              schema:
                type: integer
  '/storage/xfer-internal/rsync':
    post:
      summary: rsync
      description: >-
        Data transfer between internal CSCS file systems. To transfer files and
        folders from `/project` or `/store` to the `/scratch` file systems for
        stage-in or stage-out jobs. Reference:
        https://user.cscs.ch/storage/transfer/internal/
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: Source path to the location filesystem
                targetPath:
                  type: string
                  description: Absolute path to destination
                jobName:
                  type: string
                  description: job name the rsync operation
                  default: rsync-job
                time:
                  type: string
                  description: >-
                    Limit on the total run time of the rsync. Acceptable time formats
                    \'minutes\',   \'minutes:seconds\',   \'hours:minutes:seconds\',
                    \'days-hours\', \'days-hours:minutes\' and
                    \'days-hours:minutes:seconds\'. Note: for stage-in queue a slurm
                    xfer job.
                  default: '02:00:00'
                stageOutJobId:
                  type: string
                  description: Move data after job with id {stageOutJobId} is completed
                  default: null
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/origin
                targetPath: /home/user/destination
                jobName: rsync-firecrest-job
                stageOutJobId: "123456"
                time: "2-03:00:00"
      responses:
        '201':
          description: operation queued. Task Id returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-ok'
        '400':
          description: Error on operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access paths
              schema:
                type: integer
            X-Not-Found:
              description: sourcePath not found
              schema:
                type: integer
            X-Exists:
              description: targetPath already exists
              schema:
                type: integer
            X-Invalid-Path:
              description: sourcePath and/or targetPath are invalid paths.
              schema:
                type: integer
  '/storage/xfer-internal/mv':
    post:
      summary: move (rename) files
      description: >-
        'Move files between internal CSCS file systems. Rename sourcePath to
        targetPath, or move sourcePath to targetPath /project or /store
        to the /scratch file systems. Possible to stage-out jobs providing the
        SLURM Id of a production job. Reference:
        https://user.cscs.ch/storage/data_transfer/internal_transfer/'
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: source path to the location filesystem
                targetPath:
                  type: string
                  description: Absolute path to destination
                jobName:
                  type: string
                  description: job name the rename operation
                  default: mv-job
                time:
                  type: string
                  description: >-
                    'Limit on the total run time of the rename. Acceptable time formats
                    \'minutes\',   \'minutes:seconds\',   \'hours:minutes:seconds\',
                    \'days-hours\', \'days-hours:minutes\' and
                    \'days-hours:minutes:seconds\'. Note: for stage-in queue a slurm
                    xfer job.'
                  default: '02:00:00'
                stageOutJobId:
                  type: string
                  description: Move data after job with id {stageOutJobId} is completed
                  default: null
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/origin
                targetPath: /home/user/destination
                jobName: mv-firecrest-job
                stageOutJobId: "123456"
                time: "2-03:00:00"
      responses:
        '201':
          description: operation queued. Task Id returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-ok'
        '400':
          description: Error on operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access paths
              schema:
                type: integer
            X-Not-Found:
              description: sourcePath not found
              schema:
                type: integer
            X-Exists:
              description: targetPath already exists
              schema:
                type: integer
            X-Invalid-Path:
              description: sourcePath and/or targetPath are invalid paths.
              schema:
                type: integer
  '/storage/xfer-internal/cp':
    post:
      summary: copy files and directories
      description: >-
        'Copy files and directories between internal CSCS file systems. Copy
        sourcePath to targetPath /project or /store to the /scratch file
        systems. Possible to stage-out jobs providing the SLURM Id of a
        production job. Reference:
        https://user.cscs.ch/storage/data_transfer/internal_transfer/'
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: source path to the location filesystem
                targetPath:
                  type: string
                  description: Absolute path to destination
                jobName:
                  type: string
                  description: job name the copy operation
                  default: cp-job
                time:
                  type: string
                  description: >-
                    'Limit on the total run time of the copy. Acceptable time formats
                    \'minutes\',   \'minutes:seconds\',   \'hours:minutes:seconds\',
                    \'days-hours\', \'days-hours:minutes\' and
                    \'days-hours:minutes:seconds\'. Note: for stage-in queue a slurm
                    xfer job.'
                  default: '02:00:00'
                stageOutJobId:
                  type: string
                  description: Copy data after job with id {stageOutJobId} is completed
                  default: null
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/user/origin
                targetPath: /home/user/destination
                jobName: cp-firecrest-job
                stageOutJobId: "123456"
                time: "2-03:00:00"
      responses:
        '201':
          description: operation queued. Task Id returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-ok'
        '400':
          description: Error on operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access paths
              schema:
                type: integer
            X-Not-Found:
              description: sourcePath not found
              schema:
                type: integer
            X-Exists:
              description: targetPath already exists
              schema:
                type: integer
            X-Invalid-Path:
              description: sourcePath and/or targetPath are invalid paths.
              schema:
                type: integer
  '/storage/xfer-internal/rm':
    post:
      summary: remove files or directories
      description: >-
        'Remove files or directories in the internal CSCS file systems, with
        options rm -rf. With targetPath pointing to file system
        /project, /store, or /scratch. Possible to stage-out jobs providing the
        SLURM Id of a production job. Reference:
        https://user.cscs.ch/storage/data_transfer/internal_transfer/'
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                targetPath:
                  type: string
                  description: Absolute path to destination
                jobName:
                  type: string
                  description: job name the remove operation
                  default: rm-job
                time:
                  type: string
                  description: >-
                    'Limit on the total run time of the rm. Acceptable time formats
                    \'minutes\',   \'minutes:seconds\',   \'hours:minutes:seconds\',
                    \'days-hours\', \'days-hours:minutes\' and
                    \'days-hours:minutes:seconds\'. Note: for stage-in queue a slurm
                    xfer job.'
                  default: '02:00:00'
                stageOutJobId:
                  type: string
                  description: Delete data after job with id {stageOutJobId} is completed
                  default: null
              required:
                - targetPath
              example:
                targetPath: /home/user/file-to-delete
                jobName: rm-firecrest-job
                stageOutJobId: "123456"
                time: "2-03:00:00"
      responses:
        '201':
          description: operation queued. Task Id returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-ok'
        '400':
          description: Error on operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access paths
              schema:
                type: integer
            X-Not-Found:
              description: targetPath not found
              schema:
                type: integer
            X-Invalid-Path:
              description: targetPath is an invalid path.
              schema:
                type: integer
  '/storage/xfer-external/upload':
    post:
      summary: Upload a file
      description: >-
        Starts an asynchronous upload to a specific path, the upload workflow is
        coordinated by a task in the Tasks microservice. This returns a task
        task that will provide a persisten URL at which the target file can be
        uploaded to, the persistent URL is encoded with a random hash and is
        available for an extended period of time (it does not depend on the
        lifetime of the OIDC token).

      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: source path to the file in local machine
                targetPath:
                  type: string
                  description: Absolute path to destination
              required:
                - sourcePath
                - targetPath
              example:
                sourcePath: /home/local_user/origin
                targetPath: /home/user/destination
      responses:
        '201':
          description: operation queued. Task Id returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-ok'
        '400':
          description: Error on operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access path
              schema:
                type: integer
            X-Not-Found:
              description: targetPath not found
              schema:
                type: integer
            X-Invalid-Path:
              description: targetPath is an invalid path.
              schema:
                type: integer
            X-Not-A-Directory:
              description: targetPath is not a directory
              schema:
                type: string
            X-Error:
              description: Error
              schema:
                type: string
    put:
      tags:
        - Storage
      summary: Upload to Object Storage finished notification
      description: >-
        Once upload to file server has completed, user must notify this to Storage microservice in order to move file to targetPath.
      parameters:
        - in: header
          name: X-Task-ID
          description: taskid of related task created on POST upload call
          required: true
          schema:
            type: string
      responses:
        '404':
          description: task_id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
        '400':
          description: object does not exist on file server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
        '200':
          description: object start to move to targetPath
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-ok'
  '/storage/xfer-external/upload-finished/{task_id}':
    get:
      summary: Upload to Object Storage finished notification
      description: >-
        Once upload to file server has completed, user must notify this to Storage microservice in order to move file to targetPath.
      tags:
        - Storage
      parameters:
        - name: task_id
          in: path
          description: id of related task created on upload
          required: true
          schema:
            type: string
      responses:
        '404':
          description: task_id not found
        '400':
          description: object does not exist on file server.
        '200':
          description: object start to move to targetPath
      deprecated: true
  '/storage/xfer-external/download':
    post:
      summary: Download a file
      description: >-
        Start an asynchronous download by creating a new task in the Tasks
        microservice. The new task will first copy the file to the file transfer
        server, once this copy has been completed a persisten URL will be
        provided by the task. This persistent URL is encoded with a random hash
        and is available for an extended period of time (it does not depend on
        the lifetime of the OIDC token).
      tags:
        - Storage
      requestBody:
        required: true
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                sourcePath:
                  type: string
                  description: source path to the file in remote filesystem
              required:
                - sourcePath
              example:
                sourcePath: /home/user/file
      responses:
        '201':
          description: operation queued. Task Id returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-ok'
        '400':
          description: Error on operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload-notok'
          headers:
            X-Permission-Denied:
              description: User does not have permissions to access path
              schema:
                type: string
            X-Not-Found:
              description: targetPath not found
              schema:
                type: string
            X-Invalid-Path:
              description: targetPath is an invalid path.
              schema:
                type: string
            X-A-Directory:
              description: targetPath is a directory, can't download directories
              schema:
                type: string
            X-Error:
              description: Error
              schema:
                type: string

  '/tasks/':
    get:
      summary: Returns all tasks
      description: List all recorded tasks and their status.
      tags:
        - Tasks
      responses:
        '200':
          description: tasks in queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
    # post:
    #  summary: Creates a task
    #  description: Create a new task entry to keep track and link to resources
    #  tags:
    #    - Tasks
    #  responses:
    #    '201':
    #      description: task id
  '/tasks/{taskid}':
    parameters:
      - name: taskid
        in: path
        description: id of task
        required: true
        schema:
          type: string
    get:
      summary: Task status information
      description: A long running task progress and result is tracked through a {taskid}.
      tags:
        - Tasks
      responses:
        '200':
          description: task in Tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    #put:
    #  summary: Updates a task
    #  description: Updates a task entry that keeps track of progress
    #  tags:
    #    - Tasks
    #  responses:
    #    '200':
    #      description: created task
    #delete:
    #  summary: Delete task
    #  description: Delete a already existing task
    #  tags:
    #    - Tasks
    #  responses:
    #    '204':
    #      description: Task deleted
    #    '400':
    #      description: Failed to delete task

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  parameters:
    machinename:
      name: machineName
      in: path
      description: The system name
      required: true
      schema:
        type: string
    pageSize:
      name: pageSize
      in: query
      description: Number of entries returned
      schema:
        type: integer
        enum:
          - 10
          - 25
          - 50
          - 100
        default: 25
    pageNumber:
      name: pageNumber
      in: query
      description: Page number
      schema:
        type: integer
        default: 0
    path:
      name: path
      in: query
      description: Filesystem path
      schema:
        type: string
      allowReserved: true
  responses:
    QueryParameter400Error:
      description: Bad request
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    Standard400Error:
      description: Bad Request error
    Standard500Error:
      description: An unexpected error occured
  schemas:
    File-metadata:
      required:
        - name
        - type
        - link_target
        - user
        - group
        - permissions
        - last_modified
        - size
      properties:
        name:
          type: string
        type:
          type: string
        link_target:
          type: string
        user:
          type: string
        group:
          type: string
        permissions:
          type: string
        last_modified:
          type: string
        size:
          type: string
    Files-metadata:
      type: array
      items:
        $ref: '#/components/schemas/File-metadata'
    System:
      required:
        - system
      properties:
        system:
          type: string
        status:
          type: string
          enum:
            - available
            - unavailable
        description:
          type: string
    Systems:
      type: array
      items:
        $ref: '#/components/schemas/System'
    Parameters:
      type: object
      properties:
        microservice-name:
          type: object
          properties:
            name:
              type: string
            value:
              type: string
            unit:
              type: string
    Error:
      properties:
        code:
          type: string
        message:
          type: string
    Service:
      required:
        - service
      properties:
        service:
          type: string
        status:
          type: string
          enum:
            - available
            - unavailable
        description:
          type: string
    Services:
      type: array
      items:
        $ref: '#/components/schemas/Service'
    Job:
      type: object
      required:
        - jobid
      properties:
        jobid:
          type: string
        partition:
          type: string
        name:
          type: string
        user:
          type: string
        state:
          type: string
        start_time:
          type: string
        time:
          type: string
        time_left:
          type: string
        nodes:
          type: string
        nodelist:
          type: string
    Jobs:
      type: array
      items:
        $ref: '#/components/schemas/Job'
    Session:
      properties:
        authenticated:
          type: boolean
        username:
          type: string
        domain:
          type: string
        session_time:
          type: string
        session_id:
          type: string
    Application-output:
      type: object
      properties:
        stdout:
          type: string
          description: Standard output returned by application
        stderr:
          type: string
          description: Standard error returned by application.
    Task:
      type: object
      required:
        - hash_id
      properties:
        hash_id:
          type: string
        description:
          type: string
        data:
          type: object
        last_modify:
          type: string
        user:
          type: string
        status:
          type: string
        service:
          type: string
        task_url:
          type: string
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Upload-ok:
      type: object
      properties:
        success:
          type: string
        task_url:
          type: string
        task_id:
          type: string
    Upload-notok:
      type: object
      properties:
        error:
          type: string
tags:
  - name: Status
    description: Status information of infrastructure and services.
  - name: Utilities
    description: >-
      Basic system utilities. All calls are blocking and low-latency operations,
      maximum operation duration is limited by a timeout.
  - name: Compute
    description: >-
      Non-blocking calls to workload manager to submit and query jobs. The
      service responds with a reference to the temporary task resource that
      tracks the state of the request.
  - name: Storage
    description: >-
      Non-blocking calls to high-performance storage services. The service
      responds with a reference to the temporary task resource that tracks the
      state of the request.
  - name: Tasks
    description: Access status and response of compute and storage tasks.
security:
  - bearerAuth: []
